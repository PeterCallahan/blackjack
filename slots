<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Professional Slot Machine</title>
  <style>
    body {
      margin: 0;
      padding: 0;
      display: flex;
      justify-content: center;
      align-items: center;
      height: 100vh;
      background: linear-gradient(180deg, #3498db, #8e44ad);
      background-size: cover;
      font-family: Arial, sans-serif;
      color: #fff;
      animation: flashColors 2s infinite alternate;
    }

    @keyframes flashColors {
      0% {
        background-color: #3498db;
      }
      100% {
        background-color: #8e44ad;
      }
    }

    .slot-container {
      display: flex;
      flex-direction: column;
      align-items: center;
      background: rgba(0, 0, 0, 0.8);
      border-radius: 10px;
      padding: 20px;
      box-shadow: 0 0 20px rgba(0, 0, 0, 0.5);
    }

    .slots {
      position: relative;
      width: 237px;
      height: 237px;
      display: flex;
      justify-content: space-between;
      margin-bottom: 20px;
    }

    .reel {
      position: relative;
      width: 79px;
      height: 237px;
      border: 1px solid rgba(0, 0, 0, 0.3);
      border-radius: 3px;
      overflow: hidden;
      background-image: url(https://assets.codepen.io/439000/slotreel.webp);
      background-position: 0 0;
      background-repeat: repeat-y;
    }

    .reel::after {
      content: "";
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background-image: linear-gradient(rgba(0, 0, 0, 0.4) 0%, transparent 30%, transparent 70%, rgba(0, 0, 0, 0.4) 100%);
      box-shadow: inset 0 0 6px 2px rgba(0, 0, 0, 0.3);
    }

    .debug {
      font-family: monospace;
      font-size: 1.2rem;
      margin-bottom: 20px;
    }

    p {
      margin-bottom: 10px;
    }

    input[type="text"], input[type="number"] {
      padding: 8px;
      font-size: 1rem;
      border-radius: 5px;
      border: none;
      margin-right: 5px;
    }

    button {
      padding: 10px 20px;
      font-size: 1rem;
      background-color: #2ecc71;
      color: white;
      border: none;
      border-radius: 5px;
      cursor: pointer;
    }

    .leaderboard-container {
      margin-top: 20px;
      text-align: center;
    }

    .leaderboard-container h2 {
      margin-bottom: 10px;
    }

    .leaderboard {
      width: 200px;
      margin: 0 auto;
      border-collapse: collapse;
    }

    .leaderboard th, .leaderboard td {
      padding: 8px;
      border-bottom: 1px solid #fff;
    }

    .leaderboard th {
      background-color: #333;
    }

    .leaderboard td {
      background-color: #555;
    }

    .leaderboard td:first-child {
      text-align: left;
    }

    .leaderboard td:nth-child(2) {
      text-align: right;
    }
  </style>
</head>
<body>
  <div class="slot-container">
    <div class="slots">
      <div class="reel"></div>
      <div class="reel"></div>
      <div class="reel"></div>
    </div>

    <div class="debug" id="debug"></div>

    <p>Current Currency: $<span id="currency">500</span></p>

    <div>
      <label for="nameInput">Enter Your Name:</label>
      <input type="text" id="nameInput" placeholder="Your Name">
      <label for="betAmount">Enter Bet Amount:</label>
      <input type="number" id="betAmount" min="1" step="1" value="1">
    </div>

    <button id="spinButton">Spin</button>
  </div>

  <div class="leaderboard-container">
    <h2>National Leaderboard</h2>
    <table class="leaderboard">
      <thead>
        <tr>
          <th>Player</th>
          <th>Money</th>
        </tr>
      </thead>
      <tbody id="leaderboardBody">
        <!-- Leaderboard rows will be added dynamically here -->
      </tbody>
    </table>
  </div>

  <script>
    const debugEl = document.getElementById('debug');
    const iconMap = ["banana", "seven", "cherry", "plum", "orange", "bell", "bar", "lemon", "melon"];
    const icon_width = 79;
    const icon_height = 79;
    const num_icons = 9;
    const time_per_icon = 100;
    let indexes = [0, 0, 0];
    let currency = 500;

    const roll = (reel, offset = 0) => {
      const delta = (offset + 2) * num_icons + Math.round(Math.random() * num_icons);
      return new Promise((resolve, reject) => {
        const style = getComputedStyle(reel);
        const backgroundPositionY = parseFloat(style["background-position-y"]);
        const targetBackgroundPositionY = backgroundPositionY + delta * icon_height;
        const normTargetBackgroundPositionY = targetBackgroundPositionY % (num_icons * icon_height);
        setTimeout(() => {
          reel.style.transition = `background-position-y ${(8 + 1 * delta) * time_per_icon}ms cubic-bezier(.41,-0.01,.63,1.09)`;
          reel.style.backgroundPositionY = `${backgroundPositionY + delta * icon_height}px`;
        }, offset * 150);
        setTimeout(() => {
          reel.style.transition = `none`;
          reel.style.backgroundPositionY = `${normTargetBackgroundPositionY}px`;
          resolve(delta % num_icons);
        }, (8 + 1 * delta) * time_per_icon + offset * 150);
      });
    };

    const rollAll = () => {
      debugEl.textContent = 'rolling...';
      const reelsList = document.querySelectorAll('.slots > .reel');
      Promise.all([...reelsList].map((reel, i) => roll(reel, i)))
        .then((deltas) => {
          deltas.forEach((delta, i) => indexes[i] = (indexes[i] + delta) % num_icons);
          debugEl.textContent = indexes.map((i) => iconMap[i]).join(' - ');
          if (indexes[0] === indexes[1] || indexes[1] === indexes[2]) {
            const winCls = indexes[0] === indexes[2] ? "win2" : "win1";
            document.querySelector(".slots").classList.add(winCls);
            setTimeout(() => document.querySelector(".slots").classList.remove(winCls), 2000);
            currency += parseInt(document.getElementById('betAmount').value);
          } else {
            currency -= parseInt(document.getElementById('betAmount').value);
          }
          document.getElementById('currency').textContent = currency;
          updateLeaderboard(); // Update leaderboard after each spin
        });
    };

    const updateLeaderboard = () => {
      const name = document.getElementById('nameInput').value.trim();
      if (name === '') return; // If name is empty, do not update leaderboard
      let leaderboardData = JSON.parse(localStorage.getItem('leaderboard')) || [];
      const index = leaderboardData.findIndex(entry => entry.player === name);
      if (index !== -1) {
        leaderboardData[index].money = currency;
      } else {
        leaderboardData.push({ player: name, money: currency });
      }
      leaderboardData = leaderboardData.filter(entry => entry.money > 0);
      leaderboardData.sort((a, b) => b.money - a.money);
      leaderboardData = leaderboardData.slice(0, 5); // Only top 5 players
      localStorage.setItem('leaderboard', JSON.stringify(leaderboardData));

      const leaderboardBody = document.getElementById('leaderboardBody');
      leaderboardBody.innerHTML = '';
      leaderboardData.forEach(entry => {
        const row = document.createElement('tr');
        const playerCell = document.createElement('td');
        playerCell.textContent = entry.player;
        const moneyCell = document.createElement('td');
        moneyCell.textContent = '$' + entry.money;
        row.appendChild(playerCell);
        row.appendChild(moneyCell);
        leaderboardBody.appendChild(row);
      });
    };

    document.getElementById('spinButton').addEventListener('click', () => {
      const name = document.getElementById('nameInput').value.trim();
      const betAmount = parseInt(document.getElementById('betAmount').value);
      if (name === '') {
        alert('Please enter your name.');
      } else if (betAmount <= currency && betAmount > 0) {
        rollAll();
      } else {
        alert('Invalid bet amount or insufficient funds!');
      }
    });

    // Initial leaderboard update
    updateLeaderboard();
  </script>
</body>
</html>
